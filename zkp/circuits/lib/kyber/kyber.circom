pragma circom 2.1.0;

include "half_ntt.circom";
include "sha2/sha256/sha256_hash_bytes.circom";
include "sha3/sha3_bits.circom";

template samplePolyCBD(l,eta) {
    var n = 256;
    var q = 3329;
    assert(l == 2*eta*n);

    signal input b[l];
    signal output a[n];

    var x = 0;
    var y = 0;
    for(var i = 0; i < n; i++) {
        for(var j = 0; j < eta; j++) {
            x += b[2*eta*i + j];
            y += b[2*eta*i + j + eta];
        }
        a[i] <== FastSubMod(q)([x,y]);
        x = 0;
        y = 0;
    }
}
    

template kyber_enc() {
    var q = 3329;
    var n = 256;
    var k = 2;

    var eta1 = 3;
    var eta2 = 2;

    var l1 = 2*eta1*n;
    var l2 = 2*eta2*n;

    signal input randomness[n];
    signal input m[n]; // entries in {0,1665}

    // sample r, e1, e2
    var zero[8] = [0,0,0,0,0,0,0,0];
    var one[8] = [1,0,0,0,0,0,0,0];
    var two[8] = [0,1,0,0,0,0,0,0];
    var three[8] = [1,1,0,0,0,0,0,0];
    var four[8] = [0,0,1,0,0,0,0,0];

    signal shake_input_bits[5][33*8];
    for (var i=0; i<32*8; i++) {
        shake_input_bits[0][i] <== randomness[i];
        shake_input_bits[1][i] <== randomness[i];
        shake_input_bits[2][i] <== randomness[i];
        shake_input_bits[3][i] <== randomness[i];
        shake_input_bits[4][i] <== randomness[i];
    }
    for (var i=0; i<8; i++) {
        shake_input_bits[0][i+32*8] <== zero[i];
        shake_input_bits[1][i+32*8] <== one[i];
        shake_input_bits[2][i+32*8] <== two[i];
        shake_input_bits[3][i+32*8] <== three[i];
        shake_input_bits[4][i+32*8] <== four[i];
    }
    
    signal prf_r[2][l1]; 
    prf_r[0] <== SHAKE256(33*8, l1)(shake_input_bits[0]);
    prf_r[1] <== SHAKE256(33*8, l1)(shake_input_bits[1]);

    signal prf_e1[2][l2];
    prf_e1[0] <== SHAKE256(33*8, l2)(shake_input_bits[2]);
    prf_e1[1] <== SHAKE256(33*8, l2)(shake_input_bits[3]);

    signal prf_e2[l2];
    prf_e2 <== SHAKE256(33*8, l2)(shake_input_bits[4]);
    
    signal r[2][n];
    signal e1[2][n];
    signal e2[n];

    r[0] <== samplePolyCBD(l1,eta1)(prf_r[0]);
    r[1] <== samplePolyCBD(l1,eta1)(prf_r[1]);

    e1[0] <== samplePolyCBD(l2,eta2)(prf_e1[0]);
    e1[1] <== samplePolyCBD(l2,eta2)(prf_e1[1]);

    e2 <== samplePolyCBD(l2,eta2)(prf_e2);

    signal r_hat[2][n];
    r_hat[0] <== halfNTT()(r[0]);
    r_hat[1] <== halfNTT()(r[1]);

    // NTT-ed and transposed public key matrix A
    var a[2][2][n];
    a[0][0] = [2307, 2483, 565, 1287, 2572, 946, 2464, 2374, 2750, 749, 2081, 2211, 2993, 808, 2363, 2334, 2864, 635, 3252, 2469, 3151, 2407, 160, 1446, 2956, 1466, 1692, 946, 2767, 1517, 1940, 318, 3233, 1564, 1569, 2456, 1527, 2002, 1970, 2761, 308, 805, 3192, 738, 882, 1551, 580, 3229, 3031, 2441, 3037, 159, 1552, 1786, 925, 1742, 553, 2068, 738, 2180, 1937, 2352, 1583, 2329, 203, 1290, 1659, 160, 1954, 463, 623, 2359, 1028, 2999, 1418, 3087, 1787, 2929, 2068, 123, 2950, 1590, 1641, 227, 2140, 1259, 3074, 1130, 2961, 2620, 3303, 1134, 1291, 853, 481, 3030, 448, 709, 1165, 556, 1087, 1377, 3111, 2349, 246, 1434, 1492, 113, 344, 1026, 308, 1441, 2694, 955, 2038, 612, 2795, 224, 1886, 997, 3228, 3312, 568, 2777, 538, 1652, 1884, 57, 834, 890, 1269, 2940, 1189, 1221, 21, 1628, 1363, 2232, 121, 850, 1915, 3031, 617, 1374, 759, 944, 658, 3206, 1241, 2885, 2433, 2378, 2395, 620, 1026, 614, 101, 2791, 1820, 3060, 1016, 621, 1959, 2253, 905, 1448, 3084, 1975, 1104, 1332, 310, 290, 2898, 145, 2777, 481, 3042, 2443, 2828, 2319, 3328, 1935, 3302, 1643, 2260, 2644, 1843, 2179, 2726, 1161, 1147, 2105, 1163, 3165, 2515, 826, 2548, 209, 1697, 1812, 374, 2940, 285, 2977, 2667, 189, 2676, 3206, 483, 135, 880, 436, 1048, 170, 1735, 91, 1828, 1738, 1007, 2116, 1159, 4, 1867, 2777, 3148, 1470, 2645, 2376, 412, 975, 356, 730, 2708, 2403, 2852, 1189, 1138, 131, 422, 914, 2280, 2980, 459, 436, 2904, 1603, 2535, 418, 2419, 924, 1503, 2788, 735, 1928, 2623, 1303];

    a[0][1] = [1154, 2675, 2518, 497, 608, 2595, 1974, 307, 2305, 990, 1976, 2211, 1992, 883, 1829, 1916, 306, 331, 2809, 2762, 3296, 2455, 358, 2903, 2910, 700, 2103, 2480, 3070, 2116, 2368, 616, 1711, 2194, 3103, 1082, 215, 3203, 1390, 2104, 2892, 1574, 3181, 1394, 2012, 407, 1610, 512, 3291, 3320, 728, 3094, 234, 749, 1638, 3110, 2908, 1804, 285, 2086, 175, 1345, 1290, 2461, 2116, 2913, 148, 3281, 188, 542, 3014, 1963, 1007, 1605, 1326, 143, 882, 1219, 2161, 2550, 243, 1711, 3028, 3325, 389, 1631, 200, 1984, 1000, 1017, 895, 1482, 2692, 69, 252, 1884, 2961, 2158, 917, 3254, 3153, 1933, 1463, 266, 2588, 2395, 2988, 3088, 625, 1538, 341, 806, 2046, 1602, 2874, 2406, 784, 3047, 946, 2487, 1888, 855, 388, 2293, 3267, 1453, 1048, 1362, 2788, 2183, 2824, 146, 3015, 2166, 3092, 499, 559, 151, 2760, 1749, 1530, 1881, 350, 1025, 52, 1761, 1134, 1523, 254, 98, 2523, 735, 2090, 270, 2564, 3194, 566, 207, 3252, 1792, 1190, 2241, 2140, 2063, 974, 637, 1176, 28, 2389, 497, 556, 1511, 940, 1059, 1715, 797, 3202, 2391, 560, 3093, 102, 2680, 87, 1570, 729, 1032, 1354, 2744, 2020, 1473, 2962, 333, 2109, 1279, 1374, 3107, 2926, 2025, 2177, 2436, 2692, 1423, 1444, 693, 323, 1205, 2782, 1585, 276, 2153, 2727, 2088, 348, 1106, 1291, 1712, 722, 2228, 490, 2846, 1357, 2889, 1842, 1273, 1541, 3061, 2871, 294, 408, 2737, 1772, 1635, 1112, 1976, 2530, 728, 2714, 3234, 1900, 3280, 1650, 1018, 1579, 461, 3235, 1359, 356, 3227, 1423, 242, 2085, 1153, 2440, 1284, 2152, 2120];

    a[1][0] = [1992, 2013, 897, 2071, 1565, 1987, 1, 330, 2856, 2946, 287, 2929, 2721, 854, 2546, 1870, 205, 533, 1149, 2728, 3141, 1535, 3203, 1371, 1346, 768, 13, 1335, 2013, 1840, 5, 253, 353, 1186, 2130, 1284, 792, 2480, 3301, 2744, 87, 3228, 567, 292, 904, 137, 774, 1820, 3043, 3093, 3292, 2135, 2510, 1865, 2291, 476, 1959, 2502, 739, 1855, 606, 1933, 2002, 767, 871, 2404, 1545, 2635, 2680, 1268, 2936, 1618, 3080, 1189, 1359, 2200, 2824, 288, 2176, 1009, 3270, 1724, 2248, 1126, 354, 2411, 655, 22, 789, 1651, 505, 2754, 1350, 2703, 348, 1557, 1597, 5, 2140, 606, 991, 2834, 2390, 1509, 2336, 2689, 2283, 2513, 2827, 310, 671, 2439, 1850, 279, 1171, 1379, 439, 2963, 759, 439, 3279, 1633, 551, 392, 3184, 2216, 2098, 1911, 287, 3305, 290, 1745, 1596, 2344, 2052, 1082, 3175, 2056, 2282, 1772, 1743, 601, 801, 1828, 2865, 2032, 2410, 578, 2350, 2357, 2660, 85, 953, 1596, 2869, 917, 509, 2725, 1441, 545, 3044, 1627, 2077, 1809, 3070, 3076, 1231, 2667, 1300, 428, 1469, 1129, 1722, 993, 2770, 3143, 2641, 806, 2736, 1329, 1284, 92, 2893, 1405, 1205, 1457, 1684, 1157, 1284, 2434, 2616, 2363, 400, 1158, 1049, 2793, 2491, 2621, 2871, 2947, 172, 283, 244, 934, 260, 321, 2158, 1142, 2816, 9, 947, 3267, 2958, 445, 3216, 976, 2205, 1891, 2821, 3006, 1207, 435, 1557, 1273, 951, 755, 2986, 3142, 1946, 2871, 638, 273, 3114, 729, 1488, 1085, 1917, 2501, 2032, 1633, 3220, 1600, 1670, 2769, 1685, 1977, 55, 622, 2935, 2178, 1247, 1282, 2379, 1264, 866, 2531];

    a[1][1] = [1621, 1129, 1438, 2375, 2900, 1793, 2637, 365, 1648, 1205, 1195, 979, 2654, 1881, 2522, 2562, 2786, 1997, 1787, 3225, 2716, 194, 2163, 2967, 2838, 2327, 388, 1836, 2573, 1658, 1385, 1597, 954, 862, 1243, 449, 1081, 3044, 1376, 1078, 1393, 2818, 2508, 2867, 2899, 3008, 2834, 1206, 1336, 1587, 2973, 1539, 1775, 1490, 1013, 1059, 1698, 1272, 998, 1761, 130, 1394, 3045, 2748, 3284, 1195, 2753, 608, 1829, 2898, 800, 2089, 1255, 2377, 1227, 3217, 2837, 2832, 273, 1235, 849, 2844, 1821, 2972, 1992, 146, 1831, 2158, 778, 801, 2597, 3036, 1715, 867, 320, 1665, 1724, 2657, 2395, 400, 402, 3029, 2515, 440, 2945, 3019, 2040, 2844, 2978, 1925, 2961, 1205, 90, 1325, 1371, 162, 1847, 1644, 2184, 2088, 2508, 2961, 831, 371, 3101, 1806, 1567, 2544, 838, 2311, 1875, 1898, 3017, 1788, 2841, 3094, 3254, 2970, 18, 2038, 2459, 2901, 37, 1937, 1314, 3095, 2213, 2072, 1915, 2944, 2340, 2289, 2949, 1057, 1893, 969, 617, 758, 563, 1321, 1470, 2543, 1898, 2075, 399, 2318, 1094, 3200, 3133, 1542, 960, 1107, 3228, 3027, 1241, 169, 2260, 2656, 2997, 3054, 2937, 1462, 2760, 2808, 256, 1291, 25, 1677, 2821, 2130, 1997, 3025, 175, 420, 232, 3246, 615, 2006, 2389, 2180, 1672, 3315, 2852, 1677, 890, 3115, 520, 3177, 1277, 846, 3231, 2617, 1996, 2686, 1640, 866, 866, 2523, 423, 1588, 3231, 907, 1387, 3200, 2646, 2246, 1578, 912, 9, 2788, 1861, 2820, 2704, 2579, 354, 549, 3052, 1139, 63, 1685, 3067, 1110, 2037, 2628, 1929, 2785, 3104, 1533, 1644, 320, 2889, 127, 159, 287, 925, 3227];

    var t[2][n];
    t[0] = [2015, 2113, 1926, 1047, 1390, 1241, 2406, 2831, 670, 2065, 2643, 738, 3215, 1696, 190, 880, 2279, 286, 1936, 3225, 1260, 1448, 2464, 2134, 2240, 1368, 300, 2916, 1813, 865, 322, 44, 81, 1772, 657, 1482, 3108, 35, 1635, 1883, 199, 2002, 88, 471, 1299, 746, 683, 1385, 350, 2591, 3038, 2799, 3326, 180, 1283, 79, 836, 3050, 288, 1819, 2865, 2608, 2290, 1312, 755, 2586, 654, 663, 64, 343, 100, 1318, 2002, 942, 958, 398, 1495, 2197, 2204, 1191, 1391, 2731, 3249, 2311, 1580, 2219, 1786, 1395, 441, 736, 2075, 2923, 682, 1676, 1178, 2250, 557, 1572, 2491, 1586, 2736, 582, 546, 1352, 1564, 335, 2329, 237, 811, 1645, 1982, 2638, 2870, 1833, 1601, 1722, 1266, 1494, 142, 1225, 2879, 775, 1036, 464, 1878, 920, 3133, 2706, 1321, 3255, 253, 396, 1757, 172, 757, 6, 158, 2187, 2702, 85, 1142, 1698, 1230, 1463, 945, 1030, 2699, 2469, 483, 2380, 3240, 533, 2960, 887, 689, 2278, 2765, 345, 236, 578, 135, 627, 1076, 2820, 1186, 1359, 1273, 1851, 783, 2323, 1872, 1764, 224, 2439, 3318, 443, 3223, 444, 2259, 3099, 2978, 238, 1872, 2090, 498, 1489, 2038, 1169, 3183, 1782, 2444, 2816, 2143, 2264, 926, 985, 1832, 1127, 454, 2867, 1808, 616, 1200, 2684, 3016, 152, 200, 2758, 727, 853, 2160, 44, 2237, 1827, 1603, 721, 3090, 2600, 3113, 2100, 2115, 3265, 2849, 335, 3026, 890, 575, 1250, 1087, 2445, 1347, 2392, 1033, 3247, 2586, 1377, 1388, 1648, 904, 2730, 2632, 2724, 445, 2575, 2959, 1089, 1735, 2741, 3114, 2224, 1477, 488, 3042, 574, 3075, 740];

    t[1] = [2730, 3093, 2399, 1880, 1307, 3245, 1505, 2317, 1417, 13, 299, 2875, 2751, 1196, 2526, 2080, 1965, 2102, 1001, 2045, 947, 526, 2220, 1369, 1759, 1718, 3325, 1719, 2439, 2634, 1390, 2418, 1554, 277, 97, 2021, 1303, 2435, 2297, 2760, 2486, 2751, 58, 2337, 1123, 1122, 1928, 140, 1400, 2295, 1268, 797, 1595, 1607, 1520, 271, 1001, 3233, 1281, 700, 2874, 1121, 339, 1093, 3042, 205, 2220, 2670, 1606, 6, 2767, 2162, 131, 117, 2785, 2646, 7, 472, 1926, 907, 1630, 2486, 1786, 2991, 1309, 1679, 817, 3110, 213, 1335, 1839, 1085, 1168, 1605, 1039, 1218, 1874, 312, 601, 2125, 815, 892, 160, 54, 58, 1519, 170, 448, 3124, 1983, 2520, 271, 1065, 1742, 809, 868, 1063, 1494, 1639, 1608, 1569, 1565, 1455, 1858, 896, 693, 2184, 1287, 2524, 2548, 1534, 2845, 2112, 2569, 563, 1511, 2690, 1456, 225, 164, 1804, 59, 3188, 2673, 1867, 2148, 2675, 3322, 1669, 1761, 488, 2122, 3291, 1410, 3156, 553, 2112, 779, 1932, 3042, 186, 3124, 1977, 669, 493, 2251, 1730, 2272, 717, 2011, 2978, 706, 2003, 2574, 1466, 778, 2501, 961, 2259, 1724, 2808, 1094, 2544, 2535, 1361, 2821, 667, 1294, 1432, 568, 1971, 794, 2525, 440, 194, 1536, 17, 1626, 3008, 1402, 1777, 3098, 2424, 1368, 992, 1521, 2725, 2300, 574, 3189, 1885, 355, 2711, 755, 3250, 226, 3249, 439, 1330, 664, 2777, 1903, 1878, 1245, 1258, 215, 1951, 2416, 887, 1740, 279, 2506, 2073, 2533, 644, 2957, 484, 3021, 1841, 3248, 2258, 327, 2082, 852, 1096, 1732, 905, 329, 1143, 2724, 414, 3164, 3219, 734, 2651, 3210];

    // compute u = A^T * r + e1
    // intermediate values
    signal a00_r0[n];
    signal a01_r1[n];
    signal a10_r0[n];
    signal a11_r1[n];

    a00_r0 <== multiply_nttvec()(a[0][0],r_hat[0]);
    a01_r1 <== multiply_nttvec()(a[0][1],r_hat[1]);
    a10_r0 <== multiply_nttvec()(a[1][0],r_hat[0]);
    a11_r1 <== multiply_nttvec()(a[1][1],r_hat[1]);
    
    signal ATr_hat[2][n];
    for (var i = 0; i < n; i++) {
        ATr_hat[0][i] <== FastAddMod(q)([a00_r0[i],a01_r1[i]]);
        ATr_hat[1][i] <== FastAddMod(q)([a10_r0[i],a11_r1[i]]);
    }

    signal ATr[2][n];
    ATr[0] <== inv_halfNTT()(ATr_hat[0]);
    ATr[1] <== inv_halfNTT()(ATr_hat[1]);

    signal u[2][n];
    for (var i = 0; i < n; i++) {
        u[0][i] <== FastAddMod(q)([ATr[0][i],e1[0][i]]);
        u[1][i] <== FastAddMod(q)([ATr[1][i],e1[1][i]]);
    }

    // check that m is either 0 or 1665
    for (var i = 0; i < n; i++) {
        m[i] * (1665 - m[i]) === 0;
    }

    // compute v = t*r + e2 + m
    // intermediate values
    signal t0_r0[n];
    signal t1_r1[n];

    t0_r0 <== multiply_nttvec()(t[0],r_hat[0]);
    t1_r1 <== multiply_nttvec()(t[1],r_hat[1]);

    signal t_r_hat[n];
    for (var i = 0; i < n; i++) {
        t_r_hat[i] <== FastAddMod(q)([t0_r0[i],t1_r1[i]]);
    }

    signal t_r[n];
    t_r <== inv_halfNTT()(t_r_hat);

    signal t_r_e2[n];
    for (var i = 0; i < n; i++) {
        t_r_e2[i] <== FastAddMod(q)([t_r[i],e2[i]]);
    }

    signal v[n];
    for (var i = 0; i < n; i++) {
        v[i] <== FastAddMod(q)([t_r_e2[i],m[i]]);
    }

    signal compressed_u[2][n];
    signal compressed_v[n];

    for (var i = 0; i < n; i++) {
        compressed_u[0][i] <== ModSwitchInt(1<<10, q)(u[0][i]);
        compressed_u[1][i] <== ModSwitchInt(1<<10, q)(u[1][i]);
        compressed_v[i] <== ModSwitchInt(1<<4, q)(v[i]);
    }

    // convert to bytes according to the spec to get c1 and c2
    signal c1[n]; // 256*2 entries in 2^10 amounts to 640 bytes
    signal c2[n]; // 256*1 entries in 2^4 amounts to 128 bytes

    // convert compressed_u and compressed_v to bits using Num2Bits
    signal compressed_u_bits[2*n*10];
    signal compressed_v_bits[n*4];

    for (var i = 0; i < n; i++) {
        var out[10] = Num2Bits(10)(compressed_u[0][i]);
        for (var j = 0; j < 10; j++) {
            compressed_u_bits[10*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[10] = Num2Bits(10)(compressed_u[1][i]);
        for (var j = 0; j < 10; j++) {
            compressed_u_bits[10*n + 10*i + j] <== out[j];
        }
    }

    for (var i = 0; i < n; i++) {
        var out[4] = Num2Bits(4)(compressed_v[i]);
        for (var j = 0; j < 4; j++) {
            compressed_v_bits[4*i + j] <== out[j];
        }
    }
    
    // compute the SHA256 hash of the concatenation of c1 and c2
    signal sha256_input[2*n*10 + n*4];
    for (var i = 0; i < 2*n*10; i++) {
        sha256_input[i] <== compressed_u_bits[i];
    }
    for (var i = 0; i < n*4; i++) {
        sha256_input[2*n*10 + i] <== compressed_v_bits[i];
    }

    // convert to bytes
    signal output ciphertext_bytes[(2*n*10 + n*4)/8];
    for (var i = 0; i < (2*n*10 + n*4)/8; i++) {
        ciphertext_bytes[i] <== Bits2Num(8)(
            [sha256_input[8*i], 
            sha256_input[8*i+1], 
            sha256_input[8*i+2], 
            sha256_input[8*i+3], 
            sha256_input[8*i+4], 
            sha256_input[8*i+5], 
            sha256_input[8*i+6], 
            sha256_input[8*i+7]]
        );
    }
}